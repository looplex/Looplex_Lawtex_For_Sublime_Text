%YAML 1.2
---
# https://www.sublimetext.com/docs/syntax.html

name: Lawtex
file_extensions:
  - lawtex
scope: source.lawtex

version: 2

variables:
    arithmetic_operator: (\-|\+|\&|\*|\/|%|\^)
    assignment_operator: (=)
    class_name: (?:[A-Z]\w+\b)
    comparison_operator: (\[|\]|==|~=|<=|>=|<|>|\|)
    control_keywords: (metainfo|head|body|foot|extra|where|extends|externs|template|list|struct|dependency|branch|topic|loop|period|if|else|elseif|foreach|print|use)
    decimal_number: (\d+\.?\d*)
    digits:
    fractional_number: (\.\d+)
    generics: (?:<(?:[\w, ]*)>)
    hashbang_prefix: (#!)
    hexadecimal_number: (0(x|X)[0-9a-fA-F]*)
    import_keyword: import
    language_constant: (true|false|null)
    language_variable: (this|value|id|mask|transient|itemsOnPage|language|style|type|default|description|tags|statement|overview|components|audience|inputs|functionalities|warnings|upgrades|title|name|label|order|mandatory|version|index|lower|upper|separator|request|element|help|tip|atomic|fields|loaders|options|key|operation|declarations|operations)
    logical_operator: (NOT|AND|OR|XOR|EXISTS|FORALL|IN)
    meta_definition: ([^ ;]+)
    number_sign: (\+|-)
    number_variable_type: ([LlFfUuDd]|UL|ul)
    package_keyword: package
    package_specification: (?:[a-z]\w*\.)
    primitive_type: (List|Object|String|Integer|Real|Boolean|Date|Time|Text|Document|Currency|Vector|Struct)
    scientific_notation_append: ((e|E){{number_sign}}?\d+)

contexts:
    main:
        - match: ^({{hashbang_prefix}}).+$\n
        # - match: |-
            # ^                               #  Start of line
            # ({{hashbang_prefix}})           #  (Group 1)
            # .+                              #  Any character (1 or more occurrences)
            # $                               #  End of line
            # \n                              #  Back reference to Group 1
          scope: comment.line.hashbang.lawtex
          captures:
            1: punctuation.definition.comment.lawtex
        - match: ^\s*{{package_keyword}}\s+{{meta_definition}};?
        # - match: |-
            # ^                               #  Start of line
            # \s*                             #  Whitespace characters (0 or more occurrences)
            # {{package_keyword}}
            # \s+                             #  Whitespace characters (1 or more occurrences)
            # {{meta_definition}}
            # ;?                              #  Semi-colon
          scope: meta.package.lawtex
          captures:
            1: keyword.other.package.lawtex
            2: storage.type.package.lawtex
        - match: ^\s*{{import_keyword}}\s+{{meta_definition}};?
        # - match: |-
            # ^                               #  Start of line
            # \s*                             #  Whitespace characters (0 or more occurrences)
            # {{import_keyword}}
            # \s+                             #  Whitespace characters (1 or more occurrences)
            # {{meta_definition}}
            # ;?                              #  Semi-colon
          scope: meta.import.lawtex
          captures:
            1: keyword.other.import.lawtex
            2: storage.type.import.lawtex
        - include: lawtex
    class-object:
        - match: (?x)\b({{package_specification}})*({{class_name}})\b({{generics}})?\b
        # - match: |-
            # (?x)
            # \b                              #  Word boundary
            # (
                # {{package_specification}}
            # )*
            # (
                # {{class_name}}
            # )
            # \b                              #  Word boundary
            # (
                # {{generics}}
            # )?
            # \b                              #  Word boundary
          scope: storage.type.class.lawtex
    comment-block:
        - match: /\*                        #  Opening chars '/*'
          captures:
            0: punctuation.definition.comment.lawtex
          push:
            - meta_scope: comment.block.lawtex
            - match: \*/                    #  Closing chars '*/'
              captures:
                0: punctuation.definition.comment.lawtex
              pop: true
    comments:
        - match: /\*\*/                     #  Empty comment '/**/'
          scope: comment.block.empty.lawtex
          captures:
            0: punctuation.definition.comment.lawtex
        - include: scope:text.html.javadoc
        - include: comment-block
        - match: (//).*$\n?
        # - match: |-
            # (//)                            #  (Group 1) Chars '//'
            # .*                              #  Any characters (0 or more occurrences)
            # $                               #  End of line
            # \n?                             #  Back reference to Group 1
          scope: comment.line.double-slash.lawtex
          captures:
            1: punctuation.definition.comment.lawtex
    constants:
        - match: \b{{language_constant}}\b
          scope: constant.language.lawtex
    lawtex:
        - include: lawtex-code
    lawtex-code:
        - include: lawtex-code-minus-map-keys
        - include: map-keys
    lawtex-code-minus-map-keys:
        - include: comments
        - include: keyword-language
        - include: values
        - include: keyword-operator
        - include: storage-types
    keyword:
        - include: keyword-operator
        - include: keyword-language
    keyword-language:
        - match: \b{{control_keywords}}\b
          scope: keyword.control.lawtex
    keyword-operator:
        - match: '{{comparison_operator}}'
          scope: keyword.operator.comparison.lawtex
        - match: '{{assignment_operator}}'
          scope: keyword.operator.assignment.lawtex
        - match: '{{arithmetic_operator}}'
          scope: keyword.operator.arithmetic.lawtex
    map-keys:
        - match: (\w+)\s*(:)
        # - match: |-
            # (\w+)                           #  Word characters (1 or more occurrences)
            # \s*                             #  Whitespace characters (0 or more occurrences)
            # (:)                             #  Colon
          captures:
            1: constant.other.key.lawtex
            2: punctuation.definition.separator.key-value.lawtex
    method-call:
        - match: (\w+)(\()
        # - match: |-
            # (\w+)                           #  Word characters (1 or more occurrences)
            # (
                # \(                          #  Opening parenthesis
            # )
          captures:
            1: meta.method.lawtex
            2: punctuation.definition.method-parameters.begin.lawtex
          push:
            - meta_scope: meta.method-call.lawtex
            - match: \)                     #  Closing parenthesis
              captures:
                0: punctuation.definition.method-parameters.end.lawtex
              pop: true
            - match: ","                    #  Comma
              scope: punctuation.definition.separator.parameter.lawtex
            - include: lawtex-code
    method-declaration-remainder:
        - match: \(                         #  Opening parenthesis
          captures:
            0: punctuation.definition.parameters.begin.lawtex
          push:
            - meta_content_scope: meta.definition.method.parameters.lawtex
            - match: \)                     #  Closing parenthesis
              captures:
                0: punctuation.definition.parameters.end.lawtex
              pop: true
            - match: ","                    #  Comma separator
              scope: punctuation.definition.parameters.separator.lawtex
            - include: comment-block
    nest_curly:
        - match: \{                         #  Opening curly brackets
          captures:
            0: punctuation.section.scope.lawtex
          push:
            - match: \}                     #  Closing curly brackets
              captures:
                0: punctuation.section.scope.lawtex
              pop: true
            - include: nest_curly
    numbers:
        - match: ({{hexadecimal_number}}|{{number_sign}}?\b({{decimal_number}}|{{fractional_number}}){{scientific_notation_append}}?){{number_variable_type}}?\b
        # - match: |-
            # (
                # {{hexadecimal_number}}
                # |
                # {{number_sign}}?
                # \b                          #  Word boundary
                # (
                    # {{decimal_number}}
                    # |
                    # {{fractional_number}}
                # )
                # {{scientific_notation_append}}?
            # )
            # {{number_variable_type}}?
            # \b                              #  Word boundary
          scope: constant.numeric.lawtex
    storage-types:
        - match: (@[^ (]+)(\()
        # - match: |-
            # (
                # @                           #  Char '@'
                # [^ (]+                      #  Word characters (1 or more occurrences) before opening parenthesis
            # )
            # (
                # \(                          #  Opening parenthesis
            # )
          captures:
            1: storage.type.annotation.lawtex
            2: punctuation.definition.annotation-arguments.begin.lawtex
          push:
            - meta_scope: meta.declaration.annotation.lawtex
            - match: (\))                   #  Closing parenthesis
              captures:
                1: punctuation.definition.annotation-arguments.end.lawtex
              pop: true
            - match: (\w*)\s*(=)
            # - match: |-
                # (\w*)                       #  Word characters (1 or more occurrences)
                # \s*                         #  Whitespace characters (0 or more occurrences)
                # (=)                         #  Char '='
              captures:
                1: constant.other.key.lawtex
                2: keyword.operator.assignment.lawtex
            - include: values
            - match: ","                    #  Comma separator
              scope: punctuation.definition.separator.lawtex
        - match: '@\S+'
        # - match: |-
            # @                               #  Char '@'
            # \S+                             #  Non-whitespace characters (1 or more occurrences)
          scope: storage.type.annotation.lawtex
        - match: \b{{primitive_type}}\b
          scope: storage.type.primitive.lawtex
    string-quoted-double:
        - match: '"'                        #  Opening double-quotation marks
          captures:
            0: punctuation.definition.string.begin.lawtex
          push:
            - meta_scope: string.quoted.double.lawtex
            - match: '"'                    #  Closing double-quotation marks
              captures:
                0: punctuation.definition.string.end.lawtex
              pop: true
            - match: \\.                    #  Character escape (any backslash followed by any char)
              scope: constant.character.escape.lawtex
            - match: \$\w+                  #  Char '$' followed by word characters
              scope: variable.other.interpolated.lawtex
            - match: \$\{                   #  Char '$' followed by opening curly brackets
              captures:
                0: punctuation.section.embedded.lawtex
              push:
                - meta_scope: source.lawtex.embedded.source
                - match: \}                 #  Closing curly brackets
                  captures:
                    0: punctuation.section.embedded.lawtex
                  pop: true
                - include: nest_curly
    strings:
        - include: string-quoted-double
    values:
        - include: variables
        - include: strings
        - include: numbers
        - include: constants
        - include: class-object
        - include: method-call
    variables:
        - match: \b{{language_variable}}\b
          scope: variable.language.lawtex
        - match : '{{logical_operator}}'
          scope: keyword.operator.logical.lawtex